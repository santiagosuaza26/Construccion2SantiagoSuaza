# Example file for environment variables
# Copy this file as .env and configure the real values

# =============================================================================
# SQL DATABASE CONFIGURATION (MySQL)
# =============================================================================

# MySQL database host
DB_HOST=localhost

# MySQL port
DB_PORT=3306

# Database name
DB_NAME=clinicdb_prod

# MySQL username
DB_USERNAME=clinic_user

# MySQL password
DB_PASSWORD=your_secure_password_here

# =============================================================================
# NOSQL DATABASE CONFIGURATION (MongoDB)
# =============================================================================

# MongoDB host
MONGO_HOST=localhost

# MongoDB port
MONGO_PORT=27017

# Database name for clinical history
MONGO_DATABASE=clinical_history_prod

# MongoDB username (optional)
MONGO_USERNAME=

# MongoDB password (optional)
MONGO_PASSWORD=

# MongoDB authentication database
MONGO_AUTH_DATABASE=admin

# Enable SSL for MongoDB (false for development)
MONGO_SSL_ENABLED=false

# =============================================================================
# CONFIGURACIÓN DE LA APLICACIÓN
# =============================================================================

# Puerto del servidor
SERVER_PORT=8080

# Perfil de Spring Boot (dev, prod)
SPRING_PROFILES_ACTIVE=prod

# =============================================================================
# CONFIGURACIÓN DE LOGGING
# =============================================================================

# Nivel de logging para la aplicación
LOG_LEVEL_APP=INFO

# Nivel de logging para Spring Web
LOG_LEVEL_WEB=WARN

# Nivel de logging para Hibernate
LOG_LEVEL_HIBERNATE=WARN

# =============================================================================
# CONFIGURACIÓN DE ARCHIVOS
# =============================================================================

# Tamaño máximo de archivos subidos (en MB)
MAX_FILE_SIZE=10

# Tamaño máximo de request (en MB)
MAX_REQUEST_SIZE=50

# =============================================================================
# EJEMPLO DE COMANDOS PARA EJECUTAR CON DOCKER COMPOSE
# =============================================================================

# 1. Copiar y configurar el archivo de entorno:
#    cp .env.example .env
#    # Editar .env con valores reales

# 2. Construir e iniciar los contenedores:
#    docker-compose up --build

# 3. Iniciar solo los servicios de base de datos:
#    docker-compose up mysql-db mongodb -d

# 4. Iniciar solo la aplicación:
#    docker-compose up app

# 5. Ver logs de la aplicación:
#    docker-compose logs -f app

# 6. Ejecutar en modo desarrollo (con interfaces de administración):
#    docker-compose --profile dev up

# =============================================================================
# ACCESO A LAS BASES DE DATOS
# =============================================================================

# MySQL:
# - Host: localhost:3306
# - Base de datos: clinicdb_prod
# - Usuario: clinic_user
# - Contraseña: [configurada en DB_PASSWORD]

# MongoDB:
# - Host: localhost:27017
# - Base de datos: clinical_history_prod
# - Autenticación: [configurada en MONGO_USERNAME/MONGO_PASSWORD]

# Interfaces de administración (solo en desarrollo):
# - Adminer (MySQL): http://localhost:8082
# - Mongo Express: http://localhost:8081

# =============================================================================
# ESTRUCTURA DE BASES DE DATOS HÍBRIDAS
# =============================================================================

# SQL (MySQL) - Datos estructurados:
# - Usuarios del sistema
# - Pacientes
# - Órdenes médicas (headers e items)
# - Facturas y líneas de facturación
# - Inventario (medicamentos, procedimientos, diagnósticos)

# NoSQL (MongoDB) - Datos no estructurados:
# - Historia clínica (documentos flexibles por paciente y fecha)
# - Observaciones médicas
# - Notas de evolución
# - Archivos adjuntos (imágenes, documentos)

# =============================================================================
# VARIABLES ADICIONALES PARA PRODUCCIÓN
# =============================================================================

# Para producción, considerar agregar:
# JWT_SECRET=tu_jwt_secret_muy_seguro
# ENCRYPTION_KEY=tu_clave_de_encriptacion
# API_RATE_LIMIT=100
# SSL_KEYSTORE_PATH=/path/to/keystore
# SSL_KEYSTORE_PASSWORD=keystore_password