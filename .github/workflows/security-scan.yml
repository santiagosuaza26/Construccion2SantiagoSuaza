name: üîí Security Scan

on:
  schedule:
    # Run weekly on Mondays at 2 AM UTC
    - cron: '0 2 * * 1'
  push:
    branches: [ main, develop ]
    paths:
      - 'clinic/**'
      - 'frontend/**'
      - 'pom.xml'
      - 'package*.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'clinic/**'
      - 'frontend/**'
      - 'pom.xml'
      - 'package*.json'

jobs:
  # üîç Comprehensive Security Analysis
  security-analysis:
    name: üîç Security Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Backend Security Scans
      - name: üîí Trivy Backend Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './clinic'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: üîí OWASP Dependency Check (Backend)
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'Clinic Backend'
          path: './clinic'
          format: 'SARIF'
          args: >
            --enableRetired
            --enableExperimental
            --nvdValidForHours 24

      - name: üîí CodeQL Analysis (Backend)
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: security-and-quality

      - name: üîç CodeQL Analysis (Backend)
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"

      # Frontend Security Scans
      - name: üîí Trivy Frontend Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: üîí NPM Audit
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit-results.json || true

      - name: üîí ESLint Security Rules
        run: |
          cd frontend
          npm install --save-dev eslint eslint-plugin-security
          npx eslint . --ext .js,.html --config '{"extends":["plugin:security/recommended"]}' || true

      # Container Security
      - name: üîí Trivy Container Scan (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: 'ghcr.io/${{ github.repository }}/clinic-backend:latest'
          format: 'sarif'
          output: 'trivy-container-backend.sarif'
          severity: 'CRITICAL,HIGH'
        if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'

      - name: üîí Trivy Container Scan (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          scan-ref: 'ghcr.io/${{ github.repository }}/clinic-frontend:latest'
          format: 'sarif'
          output: 'trivy-container-frontend.sarif'
          severity: 'CRITICAL,HIGH'
        if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'

      # Upload Security Results
      - name: üì§ Upload Trivy Backend Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'
          category: backend-filesystem

      - name: üì§ Upload Trivy Frontend Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'
          category: frontend-filesystem

      - name: üì§ Upload OWASP Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: './reports/dependency-check-report.sarif'
          category: backend-dependencies

      - name: üì§ Upload Container Backend Results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
        with:
          sarif_file: 'trivy-container-backend.sarif'
          category: backend-container

      - name: üì§ Upload Container Frontend Results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && (github.event_name == 'schedule' || github.ref == 'refs/heads/main')
        with:
          sarif_file: 'trivy-container-frontend.sarif'
          category: frontend-container

      # Security Scorecard
      - name: üèÜ Run Security Scorecard
        uses: ossf/scorecard-action@main
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      # Generate Security Report
      - name: üìä Generate Security Report
        run: |
          echo "## üîí Security Scan Report" >> security-report.md
          echo "- **Date:** $(date)" >> security-report.md
          echo "- **Branch:** ${{ github.ref }}" >> security-report.md
          echo "- **Commit:** ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          echo "### üìã Scan Results" >> security-report.md
          echo "- ‚úÖ CodeQL Analysis: Completed" >> security-report.md
          echo "- ‚úÖ Trivy Filesystem Scan: Completed" >> security-report.md
          echo "- ‚úÖ OWASP Dependency Check: Completed" >> security-report.md
          echo "- ‚úÖ NPM Audit: Completed" >> security-report.md
          echo "" >> security-report.md
          echo "### üîç Recommendations" >> security-report.md
          echo "1. Review all CRITICAL and HIGH severity findings" >> security-report.md
          echo "2. Update vulnerable dependencies" >> security-report.md
          echo "3. Implement security headers in production" >> security-report.md
          echo "4. Regular security audits recommended" >> security-report.md

      - name: üì§ Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

  # üõ°Ô∏è Compliance Check
  compliance-check:
    name: üõ°Ô∏è Compliance Check
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.ref == 'refs/heads/main'
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: üìã Check License Compliance
        run: |
          # Check for MIT license
          if [ ! -f "LICENSE" ]; then
            echo "‚ùå LICENSE file missing"
            exit 1
          fi
          echo "‚úÖ LICENSE file present"

      - name: üìã Check Security Headers
        run: |
          # Check if security headers are configured
          if grep -q "X-Frame-Options" frontend/nginx.conf; then
            echo "‚úÖ Security headers configured"
          else
            echo "‚ùå Security headers missing"
            exit 1
          fi

      - name: üìã Validate Docker Security
        run: |
          # Check if non-root user is used
          if grep -q "USER" clinic/Dockerfile && grep -q "USER" frontend/Dockerfile; then
            echo "‚úÖ Non-root users configured"
          else
            echo "‚ùå Non-root users missing"
            exit 1
          fi

      - name: üìã HIPAA Compliance Check
        run: |
          echo "üîç Checking HIPAA compliance requirements..."
          # Check for encryption configuration
          if grep -q "JWT_SECRET" clinic/Dockerfile; then
            echo "‚úÖ JWT encryption configured"
          else
            echo "‚ö†Ô∏è JWT encryption not explicitly configured"
          fi

          # Check for audit logging
          if grep -q "logging" clinic/src/main/resources/application.properties 2>/dev/null; then
            echo "‚úÖ Logging configuration present"
          else
            echo "‚ö†Ô∏è Logging configuration not found"
          fi