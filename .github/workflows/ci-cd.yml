name: 🏥 Clinic Management CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE: ${{ github.repository }}/clinic-backend
  FRONTEND_IMAGE: ${{ github.repository }}/clinic-frontend

jobs:
  # 🔍 Code Quality & Security Analysis
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 🐛 Run Tests with Coverage
        run: mvn clean test jacoco:report -f clinic/pom.xml
        continue-on-error: false

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./clinic/target/site/jacoco/jacoco.xml
          flags: backend
          name: Backend Coverage
          fail_ci_if_error: false

      - name: 🔒 Security Scan with Trivy (Backend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './clinic'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: 🔒 Security Scan with Trivy (Frontend)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: './frontend'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: 📤 Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: 📤 Upload Frontend Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  # 🏗️ Backend Build & Test
  backend-build:
    name: 🏗️ Backend Build
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Java 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 📦 Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: 🏗️ Build Backend
        run: mvn clean compile -f clinic/pom.xml -DskipTests

      - name: 🧪 Run Unit Tests
        run: mvn test -f clinic/pom.xml -Dtest="*Test"

      - name: 🧪 Run Integration Tests
        run: mvn verify -f clinic/pom.xml -Dtest="*IntegrationTest"

      - name: 📦 Package Application
        run: mvn clean package -f clinic/pom.xml -DskipTests

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clinic-backend-jar
          path: clinic/target/*.jar
          retention-days: 30

  # 🎨 Frontend Build & Test
  frontend-build:
    name: 🎨 Frontend Build
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 📦 Install dependencies
        run: |
          cd frontend
          npm ci

      - name: 🧹 Lint code
        run: |
          cd frontend
          npm run lint || echo "Linting completed with warnings"

      - name: 🧪 Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: Frontend Coverage
          fail_ci_if_error: false

      - name: 🏗️ Build for production
        run: |
          cd frontend
          npm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: clinic-frontend-dist
          path: frontend/dist/
          retention-days: 30

  # 🐳 Docker Build & Push
  docker-build:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔑 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: clinic-backend-jar
          path: clinic/target/

      - name: 📦 Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: clinic-frontend-dist
          path: frontend/dist/

      - name: 🏗️ Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./clinic
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest,${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=Clinic Management Backend
            org.opencontainers.image.description=Spring Boot backend for clinic management system
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: 🏗️ Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest,${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.title=Clinic Management Frontend
            org.opencontainers.image.description=React frontend for clinic management system
            org.opencontainers.image.source=https://github.com/${{ github.repository }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
            org.opencontainers.image.revision=${{ github.sha }}

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging environment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Backend Image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}"
          echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}"
          # Add your deployment commands here
          # Example: kubectl set image deployment/clinic-backend backend=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  # 🎯 Deploy to Production
  deploy-production:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎯 Deploy to production environment
        run: |
          echo "🎯 Deploying to production environment..."
          echo "Backend Image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}"
          echo "Frontend Image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}"
          # Add your production deployment commands here
          # Example: kubectl set image deployment/clinic-backend backend=${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}

  # 📢 Notification
  notification:
    name: 📢 Pipeline Notification
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    steps:
      - name: 📢 Send notification
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "✅ Pipeline completed successfully!"
          else
            echo "❌ Pipeline failed!"
          fi
          # Add notification logic here (Slack, Teams, etc.)