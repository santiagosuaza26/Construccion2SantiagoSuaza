version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: clinic_postgres_prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: clinic_db
      POSTGRES_USER: clinic_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./clinic/src/main/resources/db/migration:/docker-entrypoint-initdb.d
    networks:
      - clinic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U clinic_user -d clinic_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongo:
    image: mongo:7-jammy
    container_name: clinic_mongo_prod
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: clinic_mongo
    volumes:
      - mongo_data:/data/db
    networks:
      - clinic_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: clinic_redis_prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - clinic_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Application
  backend:
    image: ghcr.io/santiagosuaza26/construccion2santiagosuaza/clinic-backend:latest
    container_name: clinic_backend_prod
    restart: unless-stopped
    environment:
      SPRING_PROFILES_ACTIVE: prod
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/clinic_db
      SPRING_DATASOURCE_USERNAME: clinic_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      SPRING_DATA_MONGODB_URI: mongodb://root:${MONGO_ROOT_PASSWORD}@mongo:27017/clinic_mongo?authSource=admin
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SERVER_PORT: 8080
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - clinic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend Application
  frontend:
    image: ghcr.io/santiagosuaza26/construccion2santiagosuaza/clinic-frontend:latest
    container_name: clinic_frontend_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/ssl/certs:ro
      - ./ssl:/etc/ssl/private:ro
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - clinic_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f -k https://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer (opcional para alta disponibilidad)
  nginx-lb:
    image: nginx:alpine
    container_name: clinic_nginx_lb_prod
    restart: unless-stopped
    ports:
      - "8080:80"
    volumes:
      - ./nginx-lb.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - clinic_network
    profiles:
      - lb  # Solo se ejecuta cuando se especifica --profile lb

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  redis_data:
    driver: local

networks:
  clinic_network:
    driver: bridge